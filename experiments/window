import sys

import plotly.graph_objects as go

import networkx as nx

import matplotlib.pyplot as plt

from PyQt5.QtWidgets import QMenu, QToolBar, QAction, QHBoxLayout
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QIcon


G = nx.random_geometric_graph(200, 0.125)

nx.draw(G)

plt.savefig("graph_pic.png")


class Window(QMainWindow):
    """Main Window."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        self.setWindowTitle("Python Menus Toolbars")
        self.resize(800, 600)
        self._addPic()
        # self.centralWidget = QLabel("Hello, World")
        # self.centralWidget.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        # self.setCentralWidget(self.centralWidget)
        self._createActions()
        self._createMenuBar()
        self._createToolBars()

    def _addPic(self):
        lb = QLabel(self)
        pixmap = QPixmap("C:/Users/Lisa/PycharmProjects/Curvature/graph_pic.png")
        height_label = 100
        lb.resize(self.width(), height_label)
        lb.setPixmap(pixmap.scaled(lb.size(), Qt.IgnoreAspectRatio))
        self.centralWidget = lb
        self.centralWidget.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.setCentralWidget(self.centralWidget)
        # self.show()

    def _createMenuBar(self):
        menuBar = self.menuBar()

        # File menu
        fileMenu = QMenu("File", self)
        menuBar.addMenu(fileMenu)
        fileMenu.addAction(self.newAction)
        fileMenu.addAction(self.openAction)
        fileMenu.addAction(self.saveAction)
        fileMenu.addAction(self.exitAction)
        # Edit menu
        editMenu = menuBar.addMenu("Edit")
        editMenu.addAction(self.copyAction)
        editMenu.addAction(self.pasteAction)
        editMenu.addAction(self.cutAction)
        editMenu.addAction(self.cutAction)
        # Find and Replace submenu in the Edit menu
        findMenu = editMenu.addMenu("Find and Replace")
        findMenu.addAction("Find...")
        findMenu.addAction("Replace...")
        # Help menu
        helpMenu = menuBar.addMenu("Help")
        helpMenu.addAction(self.helpContentAction)
        helpMenu.addAction(self.aboutAction)

    def _createToolBars(self):
        # Using a title
        fileToolBar = self.addToolBar("File")
        # Using a QToolBar object
        editToolBar = QToolBar("Edit", self)
        self.addToolBar(editToolBar)
        # Using a QToolBar object and a toolbar area
        helpToolBar = QToolBar("Help", self)
        self.addToolBar(Qt.LeftToolBarArea, helpToolBar)

    def _createActions(self):
        # Creating action using the first constructor
        self.newAction = QAction(self)
        self.newAction.setText("New")
        # Creating actions using the second constructor
        self.openAction = QAction("Open...", self)
        self.saveAction = QAction("Save", self)
        self.exitAction = QAction("Exit", self)
        self.copyAction = QAction("&Copy", self)
        self.pasteAction = QAction("&Paste", self)
        self.cutAction = QAction("Cut", self)
        self.helpContentAction = QAction("Help Content", self)
        self.aboutAction = QAction("About", self)
        # # File actions
        # self.newAction = QAction(self)
        # self.newAction.setText("&amp;New")
        # self.newAction.setIcon(QIcon(":file-new.svg"))
        # self.openAction = QAction(QIcon(":file-open.svg"), "&amp;Open...", self)
        # self.saveAction = QAction(QIcon(":file-save.svg"), "&amp;Save", self)
        # self.exitAction = QAction("&amp;Exit", self)
        # # Edit actions
        # self.copyAction = QAction(QIcon(":edit-copy.svg"), "&amp;Copy", self)
        # self.pasteAction = QAction(QIcon(":edit-paste.svg"), "&amp;Paste", self)
        # self.cutAction = QAction(QIcon(":edit-cut.svg"), "C&amp;ut", self)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Window()
    win.show()
    sys.exit(app.exec_())
